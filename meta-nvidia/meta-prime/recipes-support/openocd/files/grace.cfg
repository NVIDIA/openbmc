# SPDX-License-Identifier: BSD-3-Clause
#
# OpenOCD Target Configuration for nVidia Grace Super Chip (TH500)
#
# Copyright (c) 2023-2024, nVidia Inc.
# This file configure one Grace Superchip, for multi-socket systems call it
# multiple times.
#
# Command Line Argument Description
#
# Board File Argument Description
# These optional arguments are defined in the board file and
# referenced by the target file. See the corresponding board
# files for examples of their use.
#
# _SYSNAME: Name of the board
# _SMP_STR: Set by this file to the right value. Set to blank or do not set.
#
# Configure defaults for target.
# Can be overridden in board configuration file.
#
# NOTE: _LAST_SOCKET and _LAST_CORE_INDEX ARE RESERVED NAMES AND MUST
# NOT BE USED OUTSIDE OF THIS FILE.
if { [info exists _LAST_SOCKET] } {
	set _CURRENT_SOCKET [expr {$_LAST_SOCKET+1}]
} else {
	set _CURRENT_SOCKET 0
}
set _CHIPNAME grace.$_CURRENT_SOCKET
set _TARGETNAME $_CHIPNAME
set _CPUTAPID 0x6ba00477
#
# Configure JTAG TAPs - TAP chain declaration order is important
#
set _tap_list [jtag names]
if { [lsearch -exact $_tap_list $_CHIPNAME.armjtag] >= 0 } {
	puts "Using already created TAP $_CHIPNAME.armjtag"
} else {
	puts "Creating TAP $_CHIPNAME.armjtag"
	jtag newtap $_CHIPNAME armjtag -irlen 4 -expected-id $_CPUTAPID
}
#
# Configure JTAG DAPs
#
dap create $_CHIPNAME.armjtag.dap -chain-position $_CHIPNAME.armjtag -adiv5 -ignore-syspwrupack
# Create the DAP APB-AP MEM-AP target for the ARMV8 cores
target create $_CHIPNAME.apb mem_ap -dap $_CHIPNAME.armjtag.dap -ap-num 0
# Create the DAP AXI-AP MEM-AP target for the ARMV8 cores
target create $_CHIPNAME.axi mem_ap -dap $_CHIPNAME.armjtag.dap -ap-num 1
# Set CSW register value default correctly for AXI accessible device memory:
# Select the correct Access Port Number
$_CHIPNAME.armjtag.dap apsel 1
# First set the CSW to OpenOCD's internal default
$_CHIPNAME.armjtag.dap apcsw default
#
# Configure target CPUs
#
if { [info exists _LAST_CORE_INDEX] } {
	set _CURRENT_CORE [expr {$_LAST_CORE_INDEX+1}]
} else {
	set _CURRENT_CORE 0
}
if { ! [info exists _SMP_STR] } {
	set _SMP_STR ""
}
for {set coreid 0} {$coreid < 84} {incr coreid} {
	# Format a string to reference which CPU target to use
	set _TARGETNAME $_SYSNAME.core$_CURRENT_CORE
	set _CTINAME $_SYSNAME.cti$_CURRENT_CORE
	set _offset [expr {(0x200000 * $coreid)}]
	set _dbg_offset [expr {0x10310000 +  $_offset}]
	set _cti_offset [expr {0x103e0000 +  $_offset}]
	# Create and configure Cross Trigger Interface (CTI) - required for halt and resume
	cti create $_CTINAME -dap $_CHIPNAME.armjtag.dap -ap-num 0 -baseaddr $_cti_offset
	# Create the target
	target create $_TARGETNAME aarch64 \
		-dap $_CHIPNAME.armjtag.dap -ap-num 0 -dbgbase $_dbg_offset \
		-cti $_CTINAME -coreid $_CURRENT_CORE -rtos hwthread
	# Build string used to enable SMP mode for the ARMv8 CPU cores
	set _SMP_STR "$_SMP_STR $_TARGETNAME"
	# Clear CTI output/input enables that are not configured by OpenOCD for aarch64
	$_TARGETNAME configure -event reset-init [subst {
		$_CTINAME write INEN0 0x00000000
		$_CTINAME write INEN1 0x00000000
		$_CTINAME write INEN2 0x00000000
		$_CTINAME write INEN3 0x00000000
		$_CTINAME write INEN4 0x00000000
		$_CTINAME write INEN5 0x00000000
		$_CTINAME write INEN6 0x00000000
		$_CTINAME write INEN7 0x00000000
		$_CTINAME write INEN8 0x00000000
		$_CTINAME write OUTEN0 0x00000000
		$_CTINAME write OUTEN1 0x00000000
		$_CTINAME write OUTEN2 0x00000000
		$_CTINAME write OUTEN3 0x00000000
		$_CTINAME write OUTEN4 0x00000000
		$_CTINAME write OUTEN5 0x00000000
		$_CTINAME write OUTEN6 0x00000000
		$_CTINAME write OUTEN7 0x00000000
		$_CTINAME write OUTEN8 0x00000000
	}]
	echo "Core $_CURRENT_CORE config created.\n"
	incr _CURRENT_CORE
}
echo "All core init, created $_CURRENT_CORE cores.\n"
if { [info exists SMP_STR] } {
	# Return updated SMP configuration string back to board level
	set SMP_STR "$SMP_STR $_SMP_STR"
} else {
	set SMP_STR "target smp $_SMP_STR"
}
# For multi-socket, return total number of cores back to board level
set _LAST_CORE_INDEX [expr {$_CURRENT_CORE-1}]
set _LAST_SOCKET $_CURRENT_SOCKET
echo "Grace init done.\n"
