diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
index 8e70746a..aa88b05c 100644
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@ -227,6 +227,17 @@ int genphy_update_link(struct phy_device *phydev)
 	 */
 	mii_reg = phy_read(phydev, MDIO_DEVAD_NONE, MII_BMSR);
 
+#if 1
+	printk("genphy_update_link mdio addr %x; uid %x\n",(u32)(phydev->bus->priv), phydev->drv->uid);
+	if (phydev->drv->uid == 0x1cc916) // RTL8211F
+	{
+		mii_reg |= BMSR_LSTATUS;
+		phydev->autoneg = AUTONEG_DISABLE;
+		printk("[%s:%d] mido(%x) Force to link up reg[%d]=%02x\n", __func__, __LINE__,
+				(u32)(phydev->bus->priv), MII_BMSR, mii_reg);
+	}
+#endif
+
 	/*
 	 * If we already saw the link up, and it hasn't gone down, then
 	 * we don't need to wait for autoneg again
diff --git a/drivers/net/phy/realtek.c b/drivers/net/phy/realtek.c
index 5d8ca2c7..03e9013f 100644
--- a/drivers/net/phy/realtek.c
+++ b/drivers/net/phy/realtek.c
@@ -258,6 +258,16 @@ static int rtl8211f_parse_status(struct phy_device *phydev)
 	phy_write(phydev, MDIO_DEVAD_NONE, MIIM_RTL8211F_PAGE_SELECT, 0xa43);
 	mii_reg = phy_read(phydev, MDIO_DEVAD_NONE, MIIM_RTL8211F_PHY_STATUS);
 
+#if 1
+	printk("rtl8211f_parse_status mdio addr=%x\n",(u32)(phydev->bus->priv));
+	{
+		mii_reg |= (MIIM_RTL8211F_PHYSTAT_LINK |
+				MIIM_RTL8211F_PHYSTAT_DUPLEX | MIIM_RTL8211F_PHYSTAT_GBIT);
+		printk("[%s:%d] Blade: mdio(%x) Force link up reg[%d]=%x\n", __func__, __LINE__,
+				(u32)(phydev->bus->priv), MIIM_RTL8211F_PHY_STATUS, mii_reg);
+	}
+#endif
+
 	phydev->link = 1;
 	while (!(mii_reg & MIIM_RTL8211F_PHYSTAT_LINK)) {
 		if (i > PHY_AUTONEGOTIATE_TIMEOUT) {
