Upstream-Status: Pending
---
diff --git a/auth.h b/auth.h
index cb69477..58734d6 100644
--- a/auth.h
+++ b/auth.h
@@ -35,6 +35,7 @@ void svr_authinitialise(void);
 void recv_msg_userauth_request(void);
 void send_msg_userauth_failure(int partial, int incrfail);
 void send_msg_userauth_success(void);
+void send_msg_userauth_chauthtok(void);
 void send_msg_userauth_banner(const buffer *msg);
 void svr_auth_password(int valid_user);
 void svr_auth_pubkey(int valid_user);
diff --git a/svr-auth.c b/svr-auth.c
index 05ac6a9..39db377 100644
--- a/svr-auth.c
+++ b/svr-auth.c
@@ -470,3 +470,25 @@ void send_msg_userauth_success() {
 	TRACE(("leave send_msg_userauth_success"))
 
 }
+
+
+/* Send change password */
+void send_msg_userauth_chauthtok() {
+#ifdef ENABLE_SVR_PAM_AUTH
+       const char * msg = "";
+#else
+       const char * msg = "Password has expired. Please change it now.";
+#endif
+
+       TRACE(("enter send_msg_userauth_chauthtok"))
+
+       CHECKCLEARTOWRITE();
+
+       buf_putbyte(ses.writepayload, SSH_MSG_USERAUTH_PASSWD_CHANGEREQ);
+       buf_putstring(ses.writepayload, msg, strlen(msg));
+       buf_putstring(ses.writepayload, "en", 2);
+
+       encrypt_packet();
+
+       TRACE(("leave send_msg_userauth_chauthtok"))
+}
diff --git a/svr-authpam.c b/svr-authpam.c
index 30f0b03..658a142 100644
--- a/svr-authpam.c
+++ b/svr-authpam.c
@@ -42,13 +42,14 @@
 struct UserDataS {
 	char* user;
 	char* passwd;
+	char* new_passwd;
 };
 
 /* PAM conversation function - for now we only handle one message */
-int 
-pamConvFunc(int num_msg, 
+int
+pamConvFunc(int num_msg,
 		const struct pam_message **msg,
-		struct pam_response **respp, 
+		struct pam_response **respp,
 		void *appdata_ptr) {
 
 	int rc = PAM_SUCCESS;
@@ -70,17 +71,17 @@ pamConvFunc(int num_msg,
 
 	/* make a copy we can strip */
 	compare_message = m_strdup((*msg)->msg);
-	
+
 	/* Make the string lowercase. */
 	msg_len = strlen(compare_message);
 	for (i = 0; i < msg_len; i++) {
 		compare_message[i] = tolower(compare_message[i]);
 	}
 
-	/* If the string ends with ": ", remove the space. 
+	/* If the string ends with ": ", remove the space.
 	   ie "login: " vs "login:" */
-	if (msg_len > 2 
-			&& compare_message[msg_len-2] == ':' 
+	if (msg_len > 2
+			&& compare_message[msg_len-2] == ':'
 			&& compare_message[msg_len-1] == ' ') {
 		compare_message[msg_len-1] = '\0';
 	}
@@ -89,7 +90,7 @@ pamConvFunc(int num_msg,
 
 		case PAM_PROMPT_ECHO_OFF:
 
-			if (!(strcmp(compare_message, "password:") == 0)) {
+			if (strstr(compare_message, "password:") == NULL) {
 				/* We don't recognise the prompt as asking for a password,
 				   so can't handle it. Add more above as required for
 				   different pam modules/implementations. If you need
@@ -107,16 +108,18 @@ pamConvFunc(int num_msg,
 			resp = (struct pam_response*) m_malloc(sizeof(struct pam_response));
 			memset(resp, 0, sizeof(struct pam_response));
 
-			resp->resp = m_strdup(userDatap->passwd);
-			m_burn(userDatap->passwd, strlen(userDatap->passwd));
+			if (strstr(compare_message, "new")) {
+				resp->resp = m_strdup(userDatap->new_passwd);
+			} else {
+				resp->resp = m_strdup(userDatap->passwd);
+			}
 			(*respp) = resp;
 			break;
 
-
 		case PAM_PROMPT_ECHO_ON:
 
 			if (!(
-				(strcmp(compare_message, "login:" ) == 0) 
+				(strcmp(compare_message, "login:" ) == 0)
 				|| (strcmp(compare_message, "please enter username:") == 0)
 				|| (strcmp(compare_message, "username:") == 0)
 				)) {
@@ -161,7 +164,7 @@ pamConvFunc(int num_msg,
 		default:
 			TRACE(("Unknown message type"))
 			rc = PAM_CONV_ERR;
-			break;      
+			break;
 	}
 
 	m_free(compare_message);
@@ -180,31 +183,32 @@ pamConvFunc(int num_msg,
  * interactive responses, over the network. */
 void svr_auth_pam(int valid_user) {
 
-	struct UserDataS userData = {NULL, NULL};
+	struct UserDataS userData = {NULL, NULL, NULL};
 	struct pam_conv pamConv = {
 		pamConvFunc,
-		&userData /* submitted to pamvConvFunc as appdata_ptr */ 
+		&userData /* submitted to pamvConvFunc as appdata_ptr */
 	};
+
+	char* password = NULL;
+	unsigned int password_len = 0;
+	char* new_password = NULL;
+	unsigned int new_password_len = 0;
 	const char* printable_user = NULL;
 
-	pam_handle_t* pamHandlep = NULL;
+	int rc;
 
-	char * password = NULL;
-	unsigned int passwordlen;
+	pam_handle_t* pamHandlep = NULL;
 
-	int rc = PAM_SUCCESS;
-	unsigned char changepw;
+	unsigned char client_password_change_requested;
+	unsigned char client_password_change_required = 0;
 
 	/* check if client wants to change password */
-	changepw = buf_getbool(ses.payload);
-	if (changepw) {
-		/* not implemented by this server */
-		send_msg_userauth_failure(0, 1);
-		goto cleanup;
+	client_password_change_requested = buf_getbool(ses.payload);
+	password = buf_getstring(ses.payload, &password_len);
+	if (client_password_change_requested) {
+		new_password = buf_getstring(ses.payload, &new_password_len);
 	}
 
-	password = buf_getstring(ses.payload, &passwordlen);
-
 	/* We run the PAM conversation regardless of whether the username is valid
 	in case the conversation function has an inherent delay.
 	Use ses.authstate.username rather than ses.authstate.pw_name.
@@ -215,6 +219,7 @@ void svr_auth_pam(int valid_user) {
 	 * function (above) which takes care of it */
 	userData.user = ses.authstate.username;
 	userData.passwd = password;
+	userData.new_passwd = new_password;
 
 	if (ses.authstate.pw_name) {
 		printable_user = ses.authstate.pw_name;
@@ -224,7 +229,7 @@ void svr_auth_pam(int valid_user) {
 
 	/* Init pam */
 	if ((rc = pam_start("dropbear", NULL, &pamConv, &pamHandlep)) != PAM_SUCCESS) {
-		dropbear_log(LOG_WARNING, "pam_start() failed, rc=%d, %s", 
+		dropbear_log(LOG_WARNING, "pam_start() failed, rc=%d, %s",
 				rc, pam_strerror(pamHandlep, rc));
 		goto cleanup;
 	}
@@ -248,9 +253,8 @@ void svr_auth_pam(int valid_user) {
 #endif
 
 	/* (void) pam_set_item(pamHandlep, PAM_FAIL_DELAY, (void*) pamDelayFunc); */
-
 	if ((rc = pam_authenticate(pamHandlep, 0)) != PAM_SUCCESS) {
-		dropbear_log(LOG_WARNING, "pam_authenticate() failed, rc=%d, %s", 
+		dropbear_log(LOG_WARNING, "pam_authenticate() failed, rc=%d, %s",
 				rc, pam_strerror(pamHandlep, rc));
 		dropbear_log(LOG_WARNING,
 				"Bad PAM password attempt for '%s' from %s",
@@ -260,8 +264,33 @@ void svr_auth_pam(int valid_user) {
 		goto cleanup;
 	}
 
-	if ((rc = pam_acct_mgmt(pamHandlep, 0)) != PAM_SUCCESS) {
-		dropbear_log(LOG_WARNING, "pam_acct_mgmt() failed, rc=%d, %s", 
+	if (client_password_change_requested) {
+		rc = pam_chauthtok(pamHandlep, 0);
+		if (rc == PAM_NEW_AUTHTOK_REQD) {
+			/* while current password was provided correctly, new was not
+			accepted (e.g. is too short), so the PAM counter needs to manually
+			reset in order to avoid the account getting locked out */
+			if ((rc = pam_setcred(pamHandlep, PAM_ESTABLISH_CRED)) != PAM_SUCCESS) {
+				dropbear_log(LOG_WARNING, "pam_setcred() failed, rc=%d, %s",
+						rc, pam_strerror(pamHandlep, rc));
+			}
+			dropbear_log(LOG_WARNING,
+					"Bad PAM password change attempt for '%s' from %s",
+					printable_user,
+					svr_ses.addrstring);
+			send_msg_userauth_failure(0, 1);
+			goto cleanup;
+		} else if (rc != PAM_SUCCESS) {
+			dropbear_log(LOG_WARNING, "pam_chauthtok() failed, rc=%d, %s",
+					rc, pam_strerror(pamHandlep, rc));
+			send_msg_userauth_failure(0, 1);
+			goto cleanup;
+		}
+	}
+
+	rc = pam_acct_mgmt(pamHandlep, 0);
+	if (!(rc == PAM_SUCCESS || rc == PAM_NEW_AUTHTOK_REQD)) {
+		dropbear_log(LOG_WARNING, "pam_acct_mgmt() failed, rc=%d, %s",
 				rc, pam_strerror(pamHandlep, rc));
 		dropbear_log(LOG_WARNING,
 				"Bad PAM password attempt for '%s' from %s",
@@ -270,6 +299,18 @@ void svr_auth_pam(int valid_user) {
 		send_msg_userauth_failure(0, 1);
 		goto cleanup;
 	}
+	client_password_change_required = (rc == PAM_NEW_AUTHTOK_REQD);
+
+	/* this phase is reached only if the authentication with currently used
+	password was correct, so to make sure that there is no risk of the account
+	getting locked out in case of any unexpected condition, we reset the PAM
+	login counter */
+	if ((rc = pam_setcred(pamHandlep, PAM_ESTABLISH_CRED)) != PAM_SUCCESS) {
+		dropbear_log(LOG_WARNING, "pam_setcred() failed, rc=%d, %s",
+				rc, pam_strerror(pamHandlep, rc));
+		send_msg_userauth_failure(0, 1);
+		goto cleanup;
+	}
 
 	if (!valid_user) {
 		/* PAM auth succeeded but the username isn't allowed in for another reason
@@ -282,13 +323,21 @@ void svr_auth_pam(int valid_user) {
 	dropbear_log(LOG_NOTICE, "PAM password auth succeeded for '%s' from %s",
 			ses.authstate.pw_name,
 			svr_ses.addrstring);
-	send_msg_userauth_success();
+	if (client_password_change_required) {
+		send_msg_userauth_chauthtok();
+	} else {
+		send_msg_userauth_success();
+	}
 
 cleanup:
 	if (password != NULL) {
-		m_burn(password, passwordlen);
+		m_burn(password, password_len);
 		m_free(password);
 	}
+	if (new_password != NULL) {
+		m_burn(new_password, new_password_len);
+		m_free(new_password);
+	}
 	if (pamHandlep != NULL) {
 		TRACE(("pam_end"))
 		(void) pam_end(pamHandlep, 0 /* pam_status */);
