Upstream-Status: Pending
---
diff --git a/auth.h b/auth.h
index 577097f..58734d6 100644
--- a/auth.h
+++ b/auth.h
@@ -66,6 +66,7 @@ void recv_msg_userauth_success(void);
 void recv_msg_userauth_specific_60(void);
 void recv_msg_userauth_pk_ok(void);
 void recv_msg_userauth_info_request(void);
+void recv_msg_userauth_passwd_changereq(void);
 void cli_get_user(void);
 void cli_auth_getmethods(void);
 int cli_auth_try(void);
diff --git a/cli-auth.c b/cli-auth.c
index 32c9c91..e0875b4 100644
--- a/cli-auth.c
+++ b/cli-auth.c
@@ -142,12 +142,8 @@ void recv_msg_userauth_specific_60() {
 
 #if DROPBEAR_CLI_PASSWORD_AUTH
 	if (cli_ses.lastauthtype == AUTH_TYPE_PASSWORD) {
-		/* Eventually there could be proper password-changing
-		 * support. However currently few servers seem to
-		 * implement it, and password auth is last-resort
-		 * regardless - keyboard-interactive is more likely
-		 * to be used anyway. */
-		dropbear_close("Your password has expired.");
+		recv_msg_userauth_passwd_changereq();
+		return;
 	}
 #endif
 
diff --git a/cli-authpasswd.c b/cli-authpasswd.c
index 91790ce..af59543 100644
--- a/cli-authpasswd.c
+++ b/cli-authpasswd.c
@@ -158,4 +158,105 @@ void cli_auth_password() {
 	cli_ses.is_trivial_auth = 0;
 	TRACE(("leave cli_auth_password"))
 }
+
+void recv_msg_userauth_passwd_changereq() {
+
+	char *info = NULL;
+	char *ret = NULL;
+	char password[DROPBEAR_MAX_CLI_PASS] = { '\0' };
+	char prompt[128];
+
+	TRACE(("enter recv_msg_userauth_passwd_changereq"))
+
+	info = buf_getstring(ses.payload, NULL);
+	if (strlen(info) > 0) {
+		cleantext(info);
+		fprintf(stderr, "%s\n", info);
+	}
+	m_free(info);
+
+	/* language tag */
+	buf_eatstring(ses.payload);
+
+	CHECKCLEARTOWRITE();
+	buf_putbyte(ses.writepayload, SSH_MSG_USERAUTH_REQUEST);
+
+	buf_putstring(ses.writepayload, cli_opts.username,
+			strlen(cli_opts.username));
+
+	buf_putstring(ses.writepayload, SSH_SERVICE_CONNECTION,
+			SSH_SERVICE_CONNECTION_LEN);
+
+	buf_putstring(ses.writepayload, AUTH_METHOD_PASSWORD,
+			AUTH_METHOD_PASSWORD_LEN);
+
+	buf_putbyte(ses.writepayload, 1); /* TRUE */
+
+	snprintf(prompt, sizeof(prompt), "Enter %s@%s's old password: ",
+			cli_opts.username, cli_opts.remotehost);
+#if DROPBEAR_CLI_ASKPASS_HELPER
+	if (want_askpass()) {
+		ret = gui_getpass(prompt);
+		if (!ret) {
+			dropbear_exit("No password");
+		}
+	} else
+#endif
+	{
+		ret = getpass_or_cancel(prompt);
+	}
+	buf_putstring(ses.writepayload, ret, strlen(ret));
+	m_burn(ret, strlen(ret));
+
+	while (password[0] == '\0') {
+		snprintf(prompt, sizeof(prompt), "Enter %s@%s's new password: ",
+			cli_opts.username, cli_opts.remotehost);
+#if DROPBEAR_CLI_ASKPASS_HELPER
+		if (want_askpass()) {
+			ret = gui_getpass(prompt);
+			if (!ret) {
+				dropbear_exit("No password");
+			}
+		} else
+#endif
+		{
+			ret = getpass_or_cancel(prompt);
+		}
+
+		/* password provided by getpass is statically allocated     */
+		/* and needs to be copied to avoid losing it by overwriting */
+		strncpy(password, ret, DROPBEAR_MAX_CLI_PASS);
+
+		snprintf(prompt, sizeof(prompt), "Retype %s@%s's new password: ",
+			cli_opts.username, cli_opts.remotehost);
+#if DROPBEAR_CLI_ASKPASS_HELPER
+		if (want_askpass()) {
+			ret = gui_getpass(prompt);
+			if (!ret) {
+				m_burn(password, strlen(password));
+				dropbear_exit("No password");
+			}
+		} else
+#endif
+		{
+			ret = getpass_or_cancel(prompt);
+		}
+
+		if (strcmp(password, ret) != 0) {
+			fprintf(stderr, "Password mismatch; try again.\n");
+			m_burn(password, strlen(password));
+			password[0] = '\0';
+		}
+		if (ret != NULL) {
+			m_burn(ret, strlen(ret));
+		}
+	}
+
+	buf_putstring(ses.writepayload, password, strlen(password));
+	m_burn(password, strlen(password));
+
+	encrypt_packet();
+
+	TRACE(("leave recv_msg_userauth_passwd_changereq"))
+}
 #endif	/* DROPBEAR_CLI_PASSWORD_AUTH */
-- 
2.34.1

